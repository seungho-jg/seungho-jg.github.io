[{"id":"1727781093653","title":"소수찾기","subtitle":"프로그래머스 완전탐색","tags":["알고리즘"],"content":"[https://school.programmers.co.kr/learn/courses/30/lessons/42839](https://school.programmers.co.kr/learn/courses/30/lessons/42839)\n### 문제풀이\n> 이 문제는 가능한 모든 숫자를 찾아서 소수인지 판별하는 문제이다.\n\n우선 소수인지 판별하는 `isPrime` 함수를 만들었다.\n`prime_set` 에 저장해서 중복계산을 최소화 하였고\n풀고나서 기억이 났는데 `for i in range(2, n)` 이 부분을 `for i in range(2, int(n**0.5) +1)`\n이렇게 제곱근까지만 검사해도 소수인지 알 수 있다.\n\n```python\nprime_set = set()\n\ndef isPrime(n):\n    if n < 2:\n        return False\n    elif n in prime_set:\n        return True\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    \n    prime_set.add(n)    \n    return True\n```\n\n다음은 인풋으로 들어온 `numbers` 에 대한 모든 자리수의 순열을 구하면 되는데 파이썬 `itertools.permutations` 을 써도 되지만 재귀를 통한 백트레킹을 통해 모든 경우의 수를 구해봤다.\n\n```python\ndef solution(numbers, combi=[], answer=set()):\n    if combi:\n        num = int(''.join(combi))\n        if isPrime(num):\n            answer.add(num)\n    for i in range(len(numbers)):\n        combi.append(numbers[i])\n        remain_nums = numbers[:i] + numbers[i+1:]\n        solution(remain_nums, combi, answer)\n        combi.pop()\n\n    return len(answer)\n```","date":"2024-10-01"}]